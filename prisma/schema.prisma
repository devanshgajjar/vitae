// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  profiles   Profile[]
  documents  Document[]
}

model Profile {
  id         String    @id @default(cuid())
  user_id    String
  name       String    @default("Default Profile")
  
  // Profile data stored as JSON
  header     Json      // UserHeader
  experience Json      // Experience[]
  education  Json      // Education[]
  skills     Json      // Skills
  projects   Json      // Project[]
  evidence   Json      // Evidence[]
  
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  documents  Document[]
  
  @@map("profiles")
}

model Document {
  id           String         @id @default(cuid())
  user_id      String
  profile_id   String
  kind         DocumentKind
  jd_hash      String         // Hash of the job description for caching
  content_md   String         // Markdown content
  trace_mapping Json          // TraceMapping[]
  options      Json           // GenerationOptions
  fit_analysis Json           // FitAnalysis
  
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  profile      Profile        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  versions     DocumentVersion[]
  
  @@map("documents")
}

model DocumentVersion {
  id              String   @id @default(cuid())
  document_id     String
  version_number  Int
  content_md      String
  changes_summary String
  created_at      DateTime @default(now())
  
  document        Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  
  @@unique([document_id, version_number])
  @@map("document_versions")
}

model JobDescriptionCache {
  id              String   @id @default(cuid())
  jd_hash         String   @unique
  parsed_data     Json     // JobDescription
  fit_analyses    Json     // Map of profile_id -> FitAnalysis
  access_count    Int      @default(1)
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("jd_cache")
}

enum DocumentKind {
  resume
  cover_letter
  linkedin_summary
}