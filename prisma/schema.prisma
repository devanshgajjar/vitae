// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  profiles      Profile[]
  documents     Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id         String    @id @default(cuid())
  user_id    String
  name       String    @default("Default Profile")
  
  // Profile data stored as JSON
  header     Json      // UserHeader
  experience Json      // Experience[]
  education  Json      // Education[]
  skills     Json      // Skills
  projects   Json      // Project[]
  evidence   Json      // Evidence[]
  
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  documents  Document[]
  
  @@map("profiles")
}

model Document {
  id           String         @id @default(cuid())
  user_id      String
  profile_id   String
  kind         DocumentKind
         jd_hash      String         // Hash of the job description for caching
         content_md   String         @db.Text // Markdown content
  trace_mapping Json          // TraceMapping[]
  options      Json           // GenerationOptions
  fit_analysis Json           // FitAnalysis
  
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  profile      Profile        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  versions     DocumentVersion[]
  
  @@map("documents")
}

model DocumentVersion {
  id              String   @id @default(cuid())
  document_id     String
  version_number  Int
  content_md      String   @db.Text
  changes_summary String   @db.Text
  created_at      DateTime @default(now())
  
  document        Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  
  @@unique([document_id, version_number])
  @@map("document_versions")
}

model JobDescriptionCache {
  id              String   @id @default(cuid())
  jd_hash         String   @unique
  parsed_data     Json     // JobDescription
  fit_analyses    Json     // Map of profile_id -> FitAnalysis
  access_count    Int      @default(1)
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  @@map("jd_cache")
}

enum DocumentKind {
  resume
  cover_letter
  linkedin_summary
}